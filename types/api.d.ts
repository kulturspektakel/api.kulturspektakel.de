/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context as ctx } from "./../src/context"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ReservationSlotAreaIdStartTimeCompoundUniqueInput: { // input type
    areaId: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  ReservationSlotWhereUniqueInput: { // input type
    areaId_startTime?: NexusGenInputs['ReservationSlotAreaIdStartTimeCompoundUniqueInput'] | null; // ReservationSlotAreaIdStartTimeCompoundUniqueInput
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
  ReservationStatus: "CheckedIn" | "Cleared" | "Pending" | "Reserved"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  JSONObject: any
}

export interface NexusGenObjects {
  Area: { // root type
    displayName: string; // String!
    id: string; // String!
  }
  Mutation: {};
  Query: {};
  Reservation: { // root type
    id: number; // Int!
    status: NexusGenEnums['ReservationStatus']; // ReservationStatus!
  }
  ReservationSlot: { // root type
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  SlotAvailability: { // root type
    availabilityForLargerPartySize?: number | null; // Int
    availabilityForSmallerPartySize?: number | null; // Int
    available: boolean; // Boolean!
    consecutiveAvailableSlots?: Array<NexusGenRootTypes['ReservationSlot'] | null> | null; // [ReservationSlot]
    reservationSlot: NexusGenRootTypes['ReservationSlot']; // ReservationSlot!
  }
  Table: { // root type
    displayName: string; // String!
    maxCapacity: number; // Int!
  }
  Viewer: { // root type
    displayName: string; // String!
    email: string; // String!
    profilePicture?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Area: { // field return type
    displayName: string; // String!
    id: string; // String!
    reservableSlots: Array<NexusGenRootTypes['SlotAvailability'] | null> | null; // [SlotAvailability]
  }
  Mutation: { // field return type
    cancelReservation: boolean | null; // Boolean
    confirmReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    requestReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
    updateReservation: NexusGenRootTypes['Reservation'] | null; // Reservation
  }
  Query: { // field return type
    area: NexusGenRootTypes['Area'] | null; // Area
    areas: Array<NexusGenRootTypes['Area'] | null> | null; // [Area]
    reservations: Array<NexusGenRootTypes['Reservation'] | null> | null; // [Reservation]
    viewer: NexusGenRootTypes['Viewer'] | null; // Viewer
  }
  Reservation: { // field return type
    id: number; // Int!
    reservationSlots: NexusGenRootTypes['ReservationSlot'][]; // [ReservationSlot!]!
    status: NexusGenEnums['ReservationStatus']; // ReservationStatus!
  }
  ReservationSlot: { // field return type
    area: NexusGenRootTypes['Area']; // Area!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  SlotAvailability: { // field return type
    availabilityForLargerPartySize: number | null; // Int
    availabilityForSmallerPartySize: number | null; // Int
    available: boolean; // Boolean!
    consecutiveAvailableSlots: Array<NexusGenRootTypes['ReservationSlot'] | null> | null; // [ReservationSlot]
    reservationSlot: NexusGenRootTypes['ReservationSlot']; // ReservationSlot!
  }
  Table: { // field return type
    area: NexusGenRootTypes['Area']; // Area!
    displayName: string; // String!
    maxCapacity: number; // Int!
  }
  Viewer: { // field return type
    displayName: string; // String!
    email: string; // String!
    profilePicture: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Area: { // field return type name
    displayName: 'String'
    id: 'String'
    reservableSlots: 'SlotAvailability'
  }
  Mutation: { // field return type name
    cancelReservation: 'Boolean'
    confirmReservation: 'Reservation'
    requestReservation: 'Reservation'
    updateReservation: 'Reservation'
  }
  Query: { // field return type name
    area: 'Area'
    areas: 'Area'
    reservations: 'Reservation'
    viewer: 'Viewer'
  }
  Reservation: { // field return type name
    id: 'Int'
    reservationSlots: 'ReservationSlot'
    status: 'ReservationStatus'
  }
  ReservationSlot: { // field return type name
    area: 'Area'
    endTime: 'DateTime'
    id: 'String'
    startTime: 'DateTime'
  }
  SlotAvailability: { // field return type name
    availabilityForLargerPartySize: 'Int'
    availabilityForSmallerPartySize: 'Int'
    available: 'Boolean'
    consecutiveAvailableSlots: 'ReservationSlot'
    reservationSlot: 'ReservationSlot'
  }
  Table: { // field return type name
    area: 'Area'
    displayName: 'String'
    maxCapacity: 'Int'
  }
  Viewer: { // field return type name
    displayName: 'String'
    email: 'String'
    profilePicture: 'String'
  }
}

export interface NexusGenArgTypes {
  Area: {
    reservableSlots: { // args
      date: NexusGenScalars['Date']; // Date!
      partySize: number; // Int!
    }
  }
  Mutation: {
    cancelReservation: { // args
      token: string; // String!
    }
    confirmReservation: { // args
      token: string; // String!
    }
    requestReservation: { // args
      otherEmails: string[]; // [String!]!
      otherPersons: string[]; // [String!]!
      primaryEmail: string; // String!
      primaryPerson: string; // String!
      slotIds: string[]; // [ID!]!
    }
    updateReservation: { // args
      otherEmails: string[]; // [String!]!
      otherPersons: string[]; // [String!]!
      primaryEmail: string; // String!
      primaryPerson: string; // String!
      token: string; // String!
    }
  }
  Query: {
    area: { // args
      id: string; // ID!
    }
    reservations: { // args
      token: string; // String!
    }
  }
  Reservation: {
    reservationSlots: { // args
      after?: NexusGenInputs['ReservationSlotWhereUniqueInput'] | null; // ReservationSlotWhereUniqueInput
      before?: NexusGenInputs['ReservationSlotWhereUniqueInput'] | null; // ReservationSlotWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}