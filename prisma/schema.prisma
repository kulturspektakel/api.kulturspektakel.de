generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Viewer {
  id                    String                  @id @default(uuid())
  displayName           String
  email                 String
  profilePicture        String?
  slackToken            String
  slackScopes           String[]
  updatedAt             DateTime                @default(now()) @updatedAt
  ClearedReservation    ClearedReservation[]
  BandApplicationRating BandApplicationRating[]
  BandApplication       BandApplication[]
}

model Area {
  id          String @id
  displayName String
  order       Int
  themeColor  String
  latitude    Float
  longitude   Float

  table           Table[]
  areaOpeningHour AreaOpeningHour[]
}

model AreaOpeningHour {
  id        Int      @id @default(autoincrement())
  area      Area     @relation(fields: [areaId], references: [id])
  startTime DateTime
  endTime   DateTime
  areaId    String
}

enum ReservationStatus {
  Pending
  Confirmed
  CheckedIn
}

model Reservation {
  id               Int               @id @default(autoincrement())
  token            String            @unique @default(uuid())
  primaryEmail     String
  primaryPerson    String
  otherPersons     String[]
  startTime        DateTime
  checkInTime      DateTime?
  endTime          DateTime
  createdAt        DateTime          @default(now())
  status           ReservationStatus @default(Pending)
  table            Table             @relation(fields: [tableId], references: [id])
  tableId          String
  checkedInPersons Int               @default(0)
  note             String?
}

model ReservationReminderSent {
  email                String   @id
  numberOfReservations Int
  sentAt               DateTime @default(now())
}

model ClearedReservation {
  id        Int      @id
  data      Json
  clearedBy Viewer?  @relation(fields: [viewerId], references: [id])
  clearedAt DateTime @default(now())
  viewerId  String?
}

enum TableType {
  TABLE
  ISLAND
}

model Table {
  id           String    @id @default(uuid())
  areaId       String
  maxCapacity  Int
  minOccupancy Int
  displayName  String
  type         TableType @default(TABLE)

  area Area @relation(fields: [areaId], references: [id])

  reservations Reservation[]
  @@unique([areaId, displayName])
}

model ProductList {
  id        Int         @id @default(autoincrement())
  name      String
  emoji     String?
  product   Product[]
  OrderItem OrderItem[]
  Device    Device[]
  active    Boolean     @default(true)
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  price           Int
  order           Int
  requiresDeposit Boolean @default(false)

  productList   ProductList @relation(fields: [productListId], references: [id])
  productListId Int
}

enum OrderPayment {
  CASH
  BON
  SUM_UP
  VOUCHER
  FREE_CREW
  FREE_BAND
}

model Device {
  id            String       @id
  Order         Order[]
  lastSeen      DateTime?
  productList   ProductList? @relation(fields: [productListId], references: [id])
  productListId Int?
}

model Order {
  id         Int          @id @default(autoincrement())
  clientId   String?
  createdAt  DateTime     @default(now())
  deviceTime DateTime
  payment    OrderPayment
  tokens     Int          @default(0)
  device     Device       @relation(fields: [deviceId], references: [id])
  items      OrderItem[]
  deviceId   String
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  order         Order        @relation(fields: [orderId], references: [id])
  orderId       Int
  amount        Int
  note          String?
  name          String
  perUnitPrice  Int
  productList   ProductList? @relation(fields: [productListId], references: [id])
  productListId Int?
}

model BandApplication {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  email                  String
  bandname               String
  genreCategory          GenreCategory
  genre                  String?
  city                   String
  facebook               String?
  instagram              String?
  website                String?
  demo                   String?
  description            String?
  numberOfArtists        Int?
  numberOfNonMaleArtists Int?
  contactName            String
  contactPhone           String
  knowsKultFrom          String?
  heardAboutBookingFrom  HeardAboutBookingFrom?
  distance               Float?
  facebookLikes          Int?
  instagramFollower      Int?
  bandApplicationRating  BandApplicationRating[]

  event               Event   @relation(fields: [eventId], references: [id])
  eventId             String
  contactedByViewer   Viewer? @relation(fields: [contactedByViewerId], references: [id])
  contactedByViewerId String?
}

enum GenreCategory {
  Rock
  Pop
  Indie
  Reggae_Ska
  Blues_Funk_Jazz_Soul
  Folk_SingerSongwriter_Country
  Elektro_HipHop
  Hardrock_Metal_Punk
  Other
}

enum HeardAboutBookingFrom {
  BYon
  Newspaper
  Friends
  Website
  Facebook
  Instagram
}

model BandApplicationRating {
  viewer            Viewer          @relation(fields: [viewerId], references: [id])
  viewerId          String
  rating            Int
  bandApplication   BandApplication @relation(fields: [bandApplicationId], references: [id])
  bandApplicationId String

  @@id([viewerId, bandApplicationId])
  @@index([bandApplicationId])
}

enum EventType {
  Kulturspektakel
}

model Event {
  id                   String            @id
  name                 String
  start                DateTime
  end                  DateTime
  eventType            EventType
  bandApplicationStart DateTime?
  bandApplicationEnd   DateTime?
  bandApplication      BandApplication[]
}
