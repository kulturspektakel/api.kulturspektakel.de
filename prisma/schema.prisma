generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, uuid_ossp(map: "uuid-ossp", schema: "public"), unaccent]
}

model Viewer {
  id                     String                   @id @default(uuid())
  displayName            String
  email                  String
  profilePicture         String?
  slackToken             String?
  slackScopes            String[]
  updatedAt              DateTime                 @default(now()) @updatedAt
  BandApplication        BandApplication[]
  BandApplicationComment BandApplicationComment[]
  BandApplicationRating  BandApplicationRating[]
  Nonce                  Nonce[]
}

model Area {
  id              String            @id
  displayName     String
  order           Int
  themeColor      String
  latitude        Float
  longitude       Float
  areaOpeningHour AreaOpeningHour[]
  BandPlaying     BandPlaying[]
}

model AreaOpeningHour {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  areaId    String
  area      Area     @relation(fields: [areaId], references: [id])
}

model ProductList {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(20)
  emoji     String?
  active    Boolean     @default(true)
  updatedAt DateTime?
  Device    Device[]
  OrderItem OrderItem[]
  product   Product[]
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(30)
  price           Int
  order           Int
  productListId   Int
  requiresDeposit Boolean     @default(false)
  productList     ProductList @relation(fields: [productListId], references: [id])
}

model Device {
  id              String            @id
  lastSeen        DateTime?
  productListId   Int?
  softwareVersion String?
  type            DeviceType
  CardTransaction CardTransaction[]
  productList     ProductList?      @relation(fields: [productListId], references: [id])
  Order           Order[]
}

model Order {
  id                      Int              @id @default(autoincrement())
  createdAt               DateTime         @default(now())
  payment                 OrderPayment
  deposit                 Int              @default(0)
  deviceId                String?
  cardTransactionClientId String?
  CardTransaction         CardTransaction? @relation(fields: [cardTransactionClientId], references: [clientId])
  device                  Device?          @relation(fields: [deviceId], references: [id])
  items                   OrderItem[]
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  orderId       Int
  amount        Int
  note          String?
  name          String
  perUnitPrice  Int
  productListId Int?
  order         Order        @relation(fields: [orderId], references: [id])
  productList   ProductList? @relation(fields: [productListId], references: [id])
}

model CardTransaction {
  clientId        String              @id
  cardId          String
  depositBefore   Int
  depositAfter    Int
  balanceBefore   Int
  balanceAfter    Int
  transactionType CardTransactionType
  deviceId        String
  createdAt       DateTime            @default(now())
  deviceTime      DateTime
  counter         Int?
  device          Device              @relation(fields: [deviceId], references: [id])
  Order           Order[]
}

model BandApplication {
  id                     String                   @id @default(uuid())
  createdAt              DateTime                 @default(now())
  email                  String
  bandname               String
  genre                  String?
  city                   String
  facebook               String?
  demo                   String?
  description            String?
  numberOfArtists        Int?
  numberOfNonMaleArtists Int?
  contactName            String
  contactPhone           String
  knowsKultFrom          String?
  distance               Float?
  facebookLikes          Int?
  website                String?
  genreCategory          GenreCategory
  heardAboutBookingFrom  HeardAboutBookingFrom?
  contactedByViewerId    String?
  instagram              String?
  instagramFollower      Int?
  eventId                String
  hasPreviouslyPlayed    PreviouslyPlayed?
  lastContactedAt        DateTime?
  latitude               Float?
  longitude              Float?
  demoEmbedUrl           String?
  demoEmbed              String?
  demoEmbedType          DemoEmbedType?
  contactedByViewer      Viewer?                  @relation(fields: [contactedByViewerId], references: [id])
  event                  Event                    @relation(fields: [eventId], references: [id])
  bandApplicationComment BandApplicationComment[]
  bandApplicationRating  BandApplicationRating[]
}

model BandApplicationRating {
  viewerId          String
  rating            Int
  bandApplicationId String
  bandApplication   BandApplication @relation(fields: [bandApplicationId], references: [id])
  viewer            Viewer          @relation(fields: [viewerId], references: [id])

  @@id([viewerId, bandApplicationId])
  @@index([bandApplicationId])
}

model BandApplicationComment {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  viewerId          String
  comment           String
  bandApplicationId String
  bandApplication   BandApplication @relation(fields: [bandApplicationId], references: [id])
  viewer            Viewer          @relation(fields: [viewerId], references: [id])
}

model Event {
  id                   String            @id
  name                 String
  start                DateTime
  end                  DateTime
  eventType            EventType
  bandApplicationStart DateTime?
  bandApplicationEnd   DateTime?
  djApplicationEnd     DateTime?
  poster               String?           @db.Uuid
  bandApplication      BandApplication[]
  BandPlaying          BandPlaying[]
}

model BandPlaying {
  id               String   @id @default(uuid())
  name             String
  startTime        DateTime
  endTime          DateTime
  description      String?
  shortDescription String?
  genre            String?
  instagram        String?
  spotify          String?
  facebook         String?
  website          String?
  youtube          String?
  soundcloud       String?
  areaId           String
  eventId          String
  slug             String
  photo            String?  @db.Uuid
  area             Area     @relation(fields: [areaId], references: [id])
  event            Event    @relation(fields: [eventId], references: [id])

  @@unique([areaId, startTime])
  @@unique([eventId, slug])
}

model Nonce {
  nonce        String   @id @default(uuid())
  expiresAt    DateTime
  createdForId String?
  createdFor   Viewer?  @relation(fields: [createdForId], references: [id])
}

model News {
  slug      String   @id
  title     String
  content   String
  createdAt DateTime @default(now())
}

enum OrderPayment {
  CASH
  BON
  SUM_UP
  VOUCHER
  FREE_CREW
  FREE_BAND
  KULT_CARD
}

enum DeviceType {
  CONTACTLESS_TERMINAL
  IPAD
}

enum CardTransactionType {
  TopUp
  Charge
  Cashout
}

enum DemoEmbedType {
  Unresolvable
  YouTubeVideo
  YouTubePlaylist
  BandcampAlbum
  BandcampTrack
  SoundcloudUrl
  SpotifyTrack
  SpotifyArtist
  SpotifyAlbum
}

enum PreviouslyPlayed {
  Yes
  OtherFormation
  No
}

enum GenreCategory {
  Rock
  Pop
  Indie
  Reggae_Ska
  Blues_Funk_Jazz_Soul
  Folk_SingerSongwriter_Country
  Elektro_HipHop
  Hardrock_Metal_Punk
  Other
  DJ
}

enum HeardAboutBookingFrom {
  BYon
  Newspaper
  Friends
  Website
  Facebook
  Instagram
}

enum EventType {
  Kulturspektakel
  Other
  Locker
}
