generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["postgresqlExtensions"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model Viewer {
  id                    String                  @id @default(uuid())
  displayName           String
  email                 String
  profilePicture        String?
  slackToken            String?
  slackScopes           String[]
  updatedAt             DateTime                @default(now()) @updatedAt
  BandApplicationRating BandApplicationRating[]
  BandApplication       BandApplication[]
  Nonce                 Nonce[]
}

model Area {
  id          String @id
  displayName String
  order       Int
  themeColor  String
  latitude    Float
  longitude   Float

  areaOpeningHour AreaOpeningHour[]
  BandPlaying     BandPlaying[]
}

model AreaOpeningHour {
  id        Int      @id @default(autoincrement())
  area      Area     @relation(fields: [areaId], references: [id])
  startTime DateTime
  endTime   DateTime
  areaId    String
}

model ProductList {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(20)
  emoji     String?
  product   Product[]
  OrderItem OrderItem[]
  Device    Device[]
  active    Boolean     @default(true)
  updatedAt DateTime?
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(30)
  price           Int
  order           Int
  requiresDeposit Boolean @default(false)

  productList   ProductList @relation(fields: [productListId], references: [id])
  productListId Int
}

enum OrderPayment {
  CASH
  BON
  SUM_UP
  VOUCHER
  FREE_CREW
  FREE_BAND
  KULT_CARD
}

enum DeviceType {
  CONTACTLESS_TERMINAL
  IPAD
}

model Device {
  id              String            @id
  Order           Order[]
  lastSeen        DateTime?
  productList     ProductList?      @relation(fields: [productListId], references: [id])
  productListId   Int?
  CardTransaction CardTransaction[]
  softwareVersion String?
  type            DeviceType
}

model Order {
  id                      Int              @id @default(autoincrement())
  createdAt               DateTime         @default(now())
  payment                 OrderPayment
  deposit                 Int              @default(0)
  device                  Device?          @relation(fields: [deviceId], references: [id])
  deviceId                String?
  items                   OrderItem[]
  CardTransaction         CardTransaction? @relation(fields: [cardTransactionClientId], references: [clientId])
  cardTransactionClientId String?
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  order         Order        @relation(fields: [orderId], references: [id])
  orderId       Int
  amount        Int
  note          String?
  name          String
  perUnitPrice  Int
  productList   ProductList? @relation(fields: [productListId], references: [id])
  productListId Int?
}

model CardTransaction {
  clientId        String              @id
  createdAt       DateTime            @default(now())
  deviceTime      DateTime
  cardId          String
  depositBefore   Int
  depositAfter    Int
  balanceBefore   Int
  balanceAfter    Int
  transactionType CardTransactionType
  device          Device              @relation(fields: [deviceId], references: [id])
  deviceId        String
  Order           Order[]
  counter         Int?
}

enum CardTransactionType {
  TopUp
  Charge
  Cashout
}

model BandApplication {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  email                  String
  bandname               String
  genreCategory          GenreCategory
  genre                  String?
  city                   String
  facebook               String?
  instagram              String?
  website                String?
  demo                   String?
  description            String?
  numberOfArtists        Int?
  numberOfNonMaleArtists Int?
  contactName            String
  contactPhone           String
  knowsKultFrom          String?
  heardAboutBookingFrom  HeardAboutBookingFrom?
  distance               Float?
  facebookLikes          Int?
  instagramFollower      Int?
  bandApplicationRating  BandApplicationRating[]
  hasPreviouslyPlayed    PreviouslyPlayed?
  lastContactedAt        DateTime?

  event               Event   @relation(fields: [eventId], references: [id])
  eventId             String
  contactedByViewer   Viewer? @relation(fields: [contactedByViewerId], references: [id])
  contactedByViewerId String?
}

enum PreviouslyPlayed {
  Yes
  OtherFormation
  No
}

enum GenreCategory {
  Rock
  Pop
  Indie
  Reggae_Ska
  Blues_Funk_Jazz_Soul
  Folk_SingerSongwriter_Country
  Elektro_HipHop
  Hardrock_Metal_Punk
  DJ
  Other
}

enum HeardAboutBookingFrom {
  BYon
  Newspaper
  Friends
  Website
  Facebook
  Instagram
}

model BandApplicationRating {
  viewer            Viewer          @relation(fields: [viewerId], references: [id])
  viewerId          String
  rating            Int
  bandApplication   BandApplication @relation(fields: [bandApplicationId], references: [id])
  bandApplicationId String

  @@id([viewerId, bandApplicationId])
  @@index([bandApplicationId])
}

enum EventType {
  Kulturspektakel
}

model Event {
  id                   String            @id
  name                 String
  start                DateTime
  end                  DateTime
  eventType            EventType
  bandApplicationStart DateTime?
  bandApplicationEnd   DateTime?
  djApplicationEnd     DateTime?
  bandApplication      BandApplication[]
  BandPlaying          BandPlaying[]
}

model BandPlaying {
  id               String   @id @default(uuid())
  name             String
  startTime        DateTime
  endTime          DateTime
  description      String?
  shortDescription String?
  genre            String?
  instagram        String?
  spotify          String?
  facebook         String?
  website          String?
  youtube          String?
  soundcloud       String?
  areaId           String
  slug             String
  area             Area     @relation(fields: [areaId], references: [id])
  event            Event    @relation(fields: [eventId], references: [id])
  eventId          String

  @@unique([areaId, startTime])
}

model Nonce {
  nonce        String   @id @default(uuid())
  expiresAt    DateTime
  createdFor   Viewer?  @relation(fields: [createdForId], references: [id])
  createdForId String?
}
