### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Area implements Node {
  availability(day: Date!, partySize: Int!): [TableAvailability!]!
  availableTables(time: DateTime): Int!
  bandsPlaying(day: Date!): [Band!]!
  displayName: String!
  id: ID!
  openingHour(day: Date): [OpeningHour!]!
  table: [Table!]!
  themeColor: String!
}

type Band {
  description: String
  endTime: DateTime!
  genre: String
  id: ID!
  name: String!
  startTime: DateTime!
}

type BandApplication implements Node {
  bandApplicationRating: [BandApplicationRating!]!
  bandname: String!
  city: String!
  contactName: String!
  contactPhone: String!
  contactedByViewer: Viewer
  demo: String
  description: String
  distance: Float
  email: String!
  facebook: String
  facebookLikes: Int
  genre: String
  genreCategory: GenreCategory!
  heardAboutBookingFrom: HeardAboutBookingFrom
  id: ID!
  instagram: String
  instagramFollower: Int
  knowsKultFrom: String
  numberOfArtists: Int
  numberOfNonMaleArtists: Int
  rating: Float
}

type BandApplicationRating {
  rating: Int!
  viewer: Viewer!
}

interface Billable {
  salesNumbers(after: DateTime!, before: DateTime!): SalesNumber!
}

type Config {
  bandApplicationDeadline: DateTime!
  reservationStart: DateTime!
  tokenValue: Int!
}

input CreateBandApplicationInput {
  bandname: String!
  city: String!
  contactName: String!
  contactPhone: String!
  demo: String!
  description: String!
  email: String!
  facebook: String
  genre: String
  genreCategory: GenreCategory!
  hasPreviouslyPlayed: PreviouslyPlayed
  heardAboutBookingFrom: HeardAboutBookingFrom
  instagram: String
  knowsKultFrom: String
  numberOfArtists: Int!
  numberOfNonMaleArtists: Int!
  website: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Device implements Billable {
  id: ID!
  lastSeen: DateTime
  productList: ProductList
  salesNumbers(after: DateTime!, before: DateTime!): SalesNumber!
}

type Event implements Node {
  bandApplication: [BandApplication!]!
  bandApplicationEnd: DateTime
  bandApplicationStart: DateTime
  end: DateTime!
  id: ID!
  name: String!
  start: DateTime!
}

enum GenreCategory {
  Blues_Funk_Jazz_Soul
  Elektro_HipHop
  Folk_SingerSongwriter_Country
  Hardrock_Metal_Punk
  Indie
  Other
  Pop
  Reggae_Ska
  Rock
}

enum HeardAboutBookingFrom {
  BYon
  Facebook
  Friends
  Instagram
  Newspaper
  Website
}

type HistoricalProduct implements Billable {
  name: String!
  productListId: Int!
  salesNumbers(after: DateTime!, before: DateTime!): SalesNumber!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  cancelReservation(token: String!): Boolean
  checkInReservation(checkedInPersons: Int!, id: Int!): Reservation
  confirmReservation(token: String!): Reservation
  createBandApplication(data: CreateBandApplicationInput!): BandApplication
  createOrder(clientId: String, deposit: Int!, deviceTime: DateTime!, payment: OrderPayment!, products: [OrderItemInput!]!): Order
  createReservation(endTime: DateTime!, note: String, otherPersons: [String!]!, primaryEmail: String!, primaryPerson: String!, startTime: DateTime!, tableId: ID!): Reservation
  markBandApplicationContacted(bandApplicationId: ID!, contacted: Boolean!): BandApplication
  rateBandApplication(bandApplicationId: ID!, rating: Int): BandApplication
  requestReservation(areaId: ID!, endTime: DateTime!, otherPersons: [String!]!, primaryEmail: String!, primaryPerson: String!, startTime: DateTime!, tableType: TableType): Boolean!
  swapReservations(a: Int!, b: Int!): Boolean
  updateReservation(checkedInPersons: Int, endTime: DateTime, id: Int!, note: String, primaryPerson: String, startTime: DateTime, tableId: ID): Reservation
  updateReservationOtherPersons(otherPersons: [String!]!, token: String!): Reservation
  upsertProductList(active: Boolean, emoji: String, id: Int, name: String, products: [ProductInput!]): ProductList
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type OpeningHour {
  endTime: DateTime!
  startTime: DateTime!
}

type Order {
  createdAt: DateTime!
  deviceId: String!
  deviceTime: DateTime!
  id: Int!
  items: [OrderItem!]!
  payment: OrderPayment!
  tokens: Int!
  total: Int
}

type OrderItem {
  amount: Int!
  id: Int!
  name: String!
  note: String
  perUnitPrice: Int!
  productList: ProductList
}

input OrderItemInput {
  amount: Int!
  name: String!
  note: String
  perUnitPrice: Int!
  productListId: Int
}

enum OrderPayment {
  BON
  CASH
  FREE_BAND
  FREE_CREW
  SUM_UP
  VOUCHER
}

enum PreviouslyPlayed {
  No
  OtherFormation
  Yes
}

type Product implements Billable {
  id: Int!
  name: String!
  price: Int!
  productListId: Int!
  requiresDeposit: Boolean!
  salesNumbers(after: DateTime!, before: DateTime!): SalesNumber!
}

input ProductInput {
  name: String!
  price: Int!
  requiresDeposit: Boolean
}

type ProductList implements Billable {
  emoji: String
  historicalProducts: [HistoricalProduct!]!
  id: Int!
  name: String!
  product: [Product!]!
  salesNumbers(after: DateTime!, before: DateTime!): SalesNumber!
}

type Query {
  areas: [Area!]!
  availableCapacity(time: DateTime): Int!
  config: Config
  devices: [Device!]!
  distanceToKult(origin: String!): Float
  events: [Event!]!
  node(id: ID!): Node
  productList(id: Int!): ProductList
  productLists: [ProductList!]!
  reservationForToken(token: String!): Reservation
  reservationsByPerson: [ReservationByPerson!]!
  viewer: Viewer
}

type Reservation {
  alternativeTables: [Table]!
  availableToCheckIn: Int!
  checkInTime: DateTime
  checkedInPersons: Int!
  endTime: DateTime!
  id: Int!
  note: String
  otherPersons: [String!]!
  primaryEmail: String!
  primaryPerson: String!
  reservationsFromSamePerson: [Reservation!]!
  startTime: DateTime!
  status: ReservationStatus!
  swappableWith: [Reservation]!
  table: Table!
  tableId: String!
  token: String!
}

type ReservationByPerson {
  email: String!
  reservations: [Reservation!]!
}

enum ReservationStatus {
  CheckedIn
  Confirmed
  Pending
}

type SalesNumber {
  count: Int!
  timeSeries(grouping: TimeGrouping): [TimeSeries!]!
  total: Float!
}

type Table implements Node {
  area: Area!
  displayName: String!
  id: ID!
  maxCapacity: Int!
  reservations(day: Date): [Reservation!]!
  type: TableType!
}

type TableAvailability {
  endTime: DateTime!
  startTime: DateTime!
  tableType: TableType!
}

enum TableType {
  ISLAND
  TABLE
}

enum TimeGrouping {
  Day
  Hour
}

type TimeSeries {
  time: DateTime!
  value: Int!
}

type Viewer implements Node {
  displayName: String!
  email: String!
  id: ID!
  profilePicture: String
}
