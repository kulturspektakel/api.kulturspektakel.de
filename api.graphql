### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Area implements Node {
  availability(day: Date!, partySize: Int!): [TableAvailability!]!
  availableTables(time: DateTime): Int!
  bandsPlaying(day: Date!): [Band!]!
  displayName: String!

  """Unique identifier for the resource"""
  id: ID!
  openingHour(day: Date): [OpeningHour!]!
  table: [Table!]!
  themeColor: String!
}

type Band {
  description: String
  endTime: DateTime!
  genre: String
  id: ID!
  name: String!
  startTime: DateTime!
}

type Config {
  reservationStart: DateTime!
  tokenValue: Int!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  cancelReservation(token: String!): Boolean
  checkInReservation(checkedInPersons: Int!, id: Int!): Reservation
  confirmReservation(token: String!): Reservation
  createOrder(payment: OrderPayment!, products: [OrderItemInput!]!): Order
  createReservation(endTime: DateTime!, note: String, otherPersons: [String!]!, primaryEmail: String!, primaryPerson: String!, startTime: DateTime!, tableId: ID!): Reservation
  deleteProductList(id: Int!): Boolean
  requestReservation(areaId: ID!, endTime: DateTime!, otherPersons: [String!]!, primaryEmail: String!, primaryPerson: String!, startTime: DateTime!, tableType: TableType): Boolean!
  updateReservation(checkedInPersons: Int, endTime: DateTime, id: Int!, note: String, primaryPerson: String, startTime: DateTime, tableId: ID): Reservation
  updateReservationOtherPersons(otherPersons: [String!]!, token: String!): Reservation
  upsertProductList(emoji: String, id: Int, name: String, products: [ProductInput!]): ProductList
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type OpeningHour {
  endTime: DateTime!
  startTime: DateTime!
}

type Order {
  createdAt: DateTime!
  id: Int!
  items: [OrderItem!]!
  payment: OrderPayment!
  tokens: Int!
  total: Int
}

type OrderItem {
  amount: Int!
  id: Int!
  list: ProductList
  name: String!
  note: String
}

input OrderItemInput {
  amount: Int!
  note: String
  productId: Int!
}

enum OrderPayment {
  BON
  CASH
  FREE_BAND
  FREE_CREW
  SUM_UP
  VOUCHER
}

type Product {
  id: Int!
  name: String!
  price: Int!
  requiresDeposit: Boolean!
}

input ProductInput {
  name: String!
  price: Int!
  requireDeposit: Boolean
}

type ProductList {
  emoji: String
  id: Int!
  name: String!
  product(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, orderBy: [ProductListProductOrderByInput!]): [Product!]!
}

input ProductListProductOrderByInput {
  order: SortOrder
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  areas: [Area!]!
  availableCapacity(time: DateTime): Int!
  config: Config
  node(id: ID!): Node
  orderItems(from: DateTime, productListId: Int, until: DateTime): [OrderItem!]!
  orders: [Order!]!
  productLists: [ProductList!]!
  reservationForToken(token: String!): Reservation
  reservationsByPerson: [ReservationByPerson!]!
  viewer: Viewer
}

type Reservation {
  alternativeTables: [Table]!
  availableToCheckIn: Int!
  checkInTime: DateTime
  checkedInPersons: Int!
  endTime: DateTime!
  id: Int!
  note: String
  otherPersons: [String!]!
  primaryPerson: String!
  reservationsFromSamePerson: [Reservation!]!
  startTime: DateTime!
  status: ReservationStatus!
  table: Table!
  token: String!
}

type ReservationByPerson {
  email: String!
  reservations: [Reservation!]!
}

enum ReservationStatus {
  CheckedIn
  Confirmed
  Pending
}

enum SortOrder {
  asc
  desc
}

type Table implements Node {
  area: Area!
  displayName: String!

  """Unique identifier for the resource"""
  id: ID!
  maxCapacity: Int!
  reservations(day: Date): [Reservation!]!
  type: TableType!
}

type TableAvailability {
  endTime: DateTime!
  startTime: DateTime!
  tableType: TableType!
}

enum TableType {
  ISLAND
  TABLE
}

type Viewer {
  displayName: String!
  email: String!
  profilePicture: String
}
